parameters:
  # default values for any parameters that aren't specified.
  # please keep this list alphabetically sorted.
  azureSubscription: ''
  buildConfiguration: ''
  cdnEndpointName: ''
  cdnProfileName: ''
  cdnResourceGroupName: ''
  environment: ''
  storageAccountName: ''

stages:
  - stage: build
    jobs:
      - job: build
        steps:
          # Install all the prerequisites
          - script: npm install
            displayName: npm install
          # The above 'npm install' step does not install the angular cli globally.
          # We can install it globally with 'sudo npm install -g @angular/cli'.
          # However easier to invoke the local copy from the node_modules folder.
          - script: ./node_modules/@angular/cli/bin/ng run cloudskew-landing:prerender -c ${{parameters.buildConfiguration}} --routes-file routes.txt
            displayName: ng run cloudskew-landing:prerender -c ${{parameters.buildConfiguration}}
          # Publish the pipeline artifact
          - task: PublishPipelineArtifact@1
            displayName: publish artifact
            inputs:
              artifact: dist
              targetPath: ./dist/cloudskew-landing

  - stage: test
    jobs:
      - job: test

  - stage: deploy
    displayName: deploy to ${{parameters.environment}} environment
    jobs:
      - deployment: deploy
        displayName: deploy to ${{parameters.environment}} environment
        environment: ${{parameters.environment}}
        strategy:
          runOnce:
            deploy:
              steps:
                # Let's now download the artifact we published earlier.
                # Note: Artifacts are the only mechanism via which a stage can consume the 
                # output of an earlier stage
                - task: DownloadPipelineArtifact@2
                  displayName: download artifact
                  inputs:
                    artifactName: dist
                    targetPath: ./dist/cloudskew-landing
                # We'd have preferred to use the Azure File Copy task (- task: AzureFileCopy@3). 
                # However that task does not work on non-windows environment:
                # https://github.com/Microsoft/azure-pipelines-tasks/issues/8920
                # Some possible workarounds are to
                # 1: directly run the AZ CLI command to upload to blob storage (- script: az cli ...).
                # 2: use the AZ CLI built-in task (- task: AzureCLI@2).
                # 3: use the azcopy utility (- script: azcopy ...).
                # Let's go with #2 since there is direct integration with the service principal connection.
                - task: AzureCLI@1
                  displayName: deploy to azure storage
                  inputs:
                    azureSubscription: ${{parameters.azureSubscription}}
                    scriptLocation: inlineScript
                    inlineScript: az storage blob sync --account-name ${{parameters.storageAccountName}} -c '$web' -s './dist/cloudskew-landing/browser'
                # Purge the CDN endpoint
                - task: AzureCLI@1
                  displayName: purge CDN endpoint
                  inputs:
                    azureSubscription: ${{parameters.azureSubscription}}
                    scriptLocation: inlineScript
                    inlineScript: az cdn endpoint purge --no-wait --content-paths '/*' -n ${{parameters.cdnEndpointName}} -g ${{parameters.cdnResourceGroupName}} --profile-name ${{parameters.cdnProfileName}}
